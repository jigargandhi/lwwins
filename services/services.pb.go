// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services.proto

package services

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SetValue struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetValue) Reset()         { *m = SetValue{} }
func (m *SetValue) String() string { return proto.CompactTextString(m) }
func (*SetValue) ProtoMessage()    {}
func (*SetValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{0}
}

func (m *SetValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetValue.Unmarshal(m, b)
}
func (m *SetValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetValue.Marshal(b, m, deterministic)
}
func (m *SetValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetValue.Merge(m, src)
}
func (m *SetValue) XXX_Size() int {
	return xxx_messageInfo_SetValue.Size(m)
}
func (m *SetValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SetValue.DiscardUnknown(m)
}

var xxx_messageInfo_SetValue proto.InternalMessageInfo

func (m *SetValue) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type MergeRequest struct {
	Timestamp            uint64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value                int32    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MergeRequest) Reset()         { *m = MergeRequest{} }
func (m *MergeRequest) String() string { return proto.CompactTextString(m) }
func (*MergeRequest) ProtoMessage()    {}
func (*MergeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{1}
}

func (m *MergeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MergeRequest.Unmarshal(m, b)
}
func (m *MergeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MergeRequest.Marshal(b, m, deterministic)
}
func (m *MergeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergeRequest.Merge(m, src)
}
func (m *MergeRequest) XXX_Size() int {
	return xxx_messageInfo_MergeRequest.Size(m)
}
func (m *MergeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MergeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MergeRequest proto.InternalMessageInfo

func (m *MergeRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MergeRequest) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SyncRequest struct {
	Timestamp            uint64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{2}
}

func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRequest.Unmarshal(m, b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
}
func (m *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(m, src)
}
func (m *SyncRequest) XXX_Size() int {
	return xxx_messageInfo_SyncRequest.Size(m)
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

func (m *SyncRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*SetValue)(nil), "SetValue")
	proto.RegisterType((*MergeRequest)(nil), "MergeRequest")
	proto.RegisterType((*SyncRequest)(nil), "SyncRequest")
}

func init() { proto.RegisterFile("services.proto", fileDescriptor_8e16ccb8c5307b32) }

var fileDescriptor_8e16ccb8c5307b32 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x92, 0x4e, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0xd5, 0x07, 0xf3, 0x92, 0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0x21, 0x92,
	0x4a, 0x0a, 0x5c, 0x1c, 0xc1, 0xa9, 0x25, 0x61, 0x89, 0x39, 0xa5, 0xa9, 0x42, 0x22, 0x5c, 0xac,
	0x65, 0x20, 0x86, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x84, 0xa3, 0xe4, 0xc4, 0xc5, 0xe3,
	0x9b, 0x5a, 0x94, 0x9e, 0x1a, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc3, 0xc5, 0x59,
	0x92, 0x99, 0x9b, 0x5a, 0x5c, 0x92, 0x98, 0x5b, 0x00, 0x56, 0xc9, 0x12, 0x84, 0x10, 0x40, 0x98,
	0xc1, 0x84, 0x6c, 0x86, 0x36, 0x17, 0x77, 0x70, 0x65, 0x5e, 0x32, 0x51, 0x46, 0x18, 0x1d, 0x66,
	0xe4, 0x62, 0x0b, 0x2f, 0xca, 0x2c, 0x49, 0x2d, 0x12, 0xd2, 0xe6, 0x62, 0x0b, 0x2d, 0x48, 0x49,
	0x2c, 0x49, 0x15, 0xe2, 0xd4, 0x83, 0x39, 0x53, 0x4a, 0x4c, 0x0f, 0xe2, 0x21, 0x3d, 0x98, 0x87,
	0xf4, 0x5c, 0x41, 0x1e, 0x12, 0xd2, 0xe3, 0x62, 0x0d, 0x2c, 0x4d, 0x2d, 0xaa, 0x14, 0xc2, 0xa1,
	0x40, 0x8a, 0x57, 0x0f, 0xc5, 0x23, 0x7a, 0x5c, 0xac, 0x60, 0xbe, 0x10, 0xaa, 0x38, 0x4e, 0xf3,
	0x75, 0xb8, 0x58, 0x40, 0x9e, 0x10, 0xe2, 0xd1, 0x43, 0xf2, 0x0b, 0x2e, 0xd5, 0x49, 0x6c, 0x60,
	0xbe, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x4b, 0x41, 0x5c, 0x8e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WriterClient is the client API for Writer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WriterClient interface {
	Update(ctx context.Context, in *SetValue, opts ...grpc.CallOption) (*empty.Empty, error)
	Query(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MergeRequest, error)
	Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type writerClient struct {
	cc *grpc.ClientConn
}

func NewWriterClient(cc *grpc.ClientConn) WriterClient {
	return &writerClient{cc}
}

func (c *writerClient) Update(ctx context.Context, in *SetValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Writer/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerClient) Query(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MergeRequest, error) {
	out := new(MergeRequest)
	err := c.cc.Invoke(ctx, "/Writer/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerClient) Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Writer/Merge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Writer/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WriterServer is the server API for Writer service.
type WriterServer interface {
	Update(context.Context, *SetValue) (*empty.Empty, error)
	Query(context.Context, *empty.Empty) (*MergeRequest, error)
	Merge(context.Context, *MergeRequest) (*empty.Empty, error)
	Sync(context.Context, *SyncRequest) (*empty.Empty, error)
}

// UnimplementedWriterServer can be embedded to have forward compatible implementations.
type UnimplementedWriterServer struct {
}

func (*UnimplementedWriterServer) Update(ctx context.Context, req *SetValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedWriterServer) Query(ctx context.Context, req *empty.Empty) (*MergeRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedWriterServer) Merge(ctx context.Context, req *MergeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge not implemented")
}
func (*UnimplementedWriterServer) Sync(ctx context.Context, req *SyncRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

func RegisterWriterServer(s *grpc.Server, srv WriterServer) {
	s.RegisterService(&_Writer_serviceDesc, srv)
}

func _Writer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Writer/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServer).Update(ctx, req.(*SetValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Writer_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Writer/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServer).Query(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Writer_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Writer/Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServer).Merge(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Writer_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Writer/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Writer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Writer",
	HandlerType: (*WriterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Writer_Update_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Writer_Query_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _Writer_Merge_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Writer_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
